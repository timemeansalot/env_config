# module
snippet mod "module" b 
	module ${1}(
		${2}
	);
		${0}
	endmodule

# always 
snippet al "always" b 
	always @(${1}) begin 
		${2}
	end
# always resetn_reg
snippet alr "always with resetn_reg" b 
  always @(posedge aclk or negedge resetn_reg) begin 
    if(resetn_reg) begin
      ${1}
    end
    else begin
			${2}
    end
  end
# if 
snippet if "always" b 
	if(${1}) begin
		${2}	
	end
# else 
snippet el "always" b 
	else begin
		${1}	
	end
# else if 
snippet ei "always" b 
	else if(${1}) begin
		${2}	
	end
# clock generator
snippet clk "generator clock" b 
	// periodic time
	initial begin
		clk<=0;
		count<=0;
		forever begin 
		  #1; clk<=~clk;
		end
  	end

# clock generator
snippet genv "get generator" b 
	parameter N=4;	
	genvar i;
	generate 
		for (i=0;i<N;i=i+1) begin ${1} 
		    // logic here
			${2}	
		end
	endgenerate

# case stagements
snippet ca "case" b 
	case(${1}) 
		${2}
		default: ${0}
	endcase

# get waveforms
snippet wave "get waveforms" b 
	// generate waveforms
	initial begin
	  \$dumpfile("${1}_tb.vcd");
	  \$dumpvars(0, ${2:$1}_tb);
	end

# init bloc 
snippet ini "initial block" b 
	initial begin
		${0}
	end

# implementation 
snippet imp "get waveforms" b 
	// =========================================================================
	// ============================ implementation =============================
	// =========================================================================
