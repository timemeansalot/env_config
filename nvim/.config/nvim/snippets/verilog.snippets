# module
snippet mod "module" b 
	module ${1}(
	  input wire clk,
		input wire resetn,
		${2}
	);
		${0}
	endmodule

# always 
snippet al "always" b 
	always @(${1}) begin 
		${2}
	end
# always resetn_reg
snippet alr "always with resetn_reg" b 
  always @(posedge aclk or negedge resetn_reg) begin 
    if(~resetn_reg) begin
      ${1}
    end
    else begin
			${2}
    end
  end
# if 
snippet if "always" b 
	if(${1}) begin
		${2}	
	end
# else 
snippet el "always" b 
	else begin
		${1}	
	end
# else if 
snippet ei "always" b 
	else if(${1}) begin
		${2}	
	end
# clock generator
snippet clk "generator clock" b 
	// periodic time
	initial begin
		clk<=0;
		count<=0;
		forever begin 
		  #1; clk<=~clk;
		end
  	end

# clock generator
snippet genv "get generator" b 
	parameter N=4;	
	genvar ${1};
	generate 
		for (${1}=0;${1}<N;${1}=${1}+1) begin ${2} 
		    // logic here
			${0}	
		end
	endgenerate

# case stagements
snippet ca "case" b 
	case(${1}) 
		${2}
		default: ${0}
	endcase

# get waveforms
snippet wave "get waveforms" b 
	// generate waveforms
	initial begin
	  \$dumpfile("${1}_tb.vcd");
	  \$dumpvars(0, ${2:$1}_tb);
	end

# init bloc 
snippet ini "initial block" b 
	initial begin
		${0}
	end

# implementation 
snippet imp "get waveforms" b 
	// ======================================================
	// ================= implementation =====================
	// ======================================================

# variables
snippet var "get waveforms" b 
	// ======================================================
	// =================== variables=== =====================
	// ======================================================


# case stagements
snippet tb "testbench" b 
	`include "${1}.v"
	module ${1}_tb();

	reg clk;
	reg resetn;
	${2}
	parameter TIME_PERIOD=10;

	initial begin
		clk = 1'b0;
		forever #(TIME_PERIOD/2) clk=~clk;
	end

	initial begin
		resetn = 1'b0;
		#10 resetn = 1'b1;
	end
		
	initial begin
		#20
	end

	/* dump waveform */
	initial begin
		\$dumpfile("./wave/wave.vcd");
		\$dumpvars(0, ${1}_tb);
		#10000 \$finish;
	end


	${1} u_${1}(
		.clk(clk),
		.resetn(resetn),
	);

	endmodule
